diff --git a/src/lib/sqlite.ts b/src/lib/sqlite.ts
index 81fdaa5728bedc6cd4d55d5c0926f11a9653dcb2..5991d6d69f6c8280cd6a0d21b7284449bd139140 100644
--- a/src/lib/sqlite.ts
+++ b/src/lib/sqlite.ts
@@ -74,27 +74,27 @@ export function SQLiteDrizzleAdapter(
     createTables(tableFn)
 
   return {
-    createUser(data) {
+    async createUser(data) {
       return client
         .insert(users)
         .values({ ...data, id: crypto.randomUUID() })
         .returning()
         .get()
     },
-    getUser(data) {
-      return client.select().from(users).where(eq(users.id, data)).get() ?? null
+    async getUser(data) {
+      return (await client.select().from(users).where(eq(users.id, data)).get()) ?? null
     },
-    getUserByEmail(data) {
+    async getUserByEmail(data) {
       return (
-        client.select().from(users).where(eq(users.email, data)).get() ?? null
+        (await client.select().from(users).where(eq(users.email, data)).get()) ?? null
       )
     },
-    createSession(data) {
+    async createSession(data) {
       return client.insert(sessions).values(data).returning().get()
     },
-    getSessionAndUser(data) {
+    async getSessionAndUser(data) {
       return (
-        client
+        (await client
           .select({
             session: sessions,
             user: users,
@@ -102,10 +102,10 @@ export function SQLiteDrizzleAdapter(
           .from(sessions)
           .where(eq(sessions.sessionToken, data))
           .innerJoin(users, eq(users.id, sessions.userId))
-          .get() ?? null
+          .get()) ?? null
       )
     },
-    updateUser(data) {
+    async updateUser(data) {
       if (!data.id) {
         throw new Error("No user id.")
       }
@@ -117,7 +117,7 @@ export function SQLiteDrizzleAdapter(
         .returning()
         .get()
     },
-    updateSession(data) {
+    async updateSession(data) {
       return client
         .update(sessions)
         .set(data)
@@ -125,12 +125,12 @@ export function SQLiteDrizzleAdapter(
         .returning()
         .get()
     },
-    linkAccount(rawAccount) {
-      const updatedAccount = client
+    async linkAccount(rawAccount) {
+      const updatedAccount = await (client
         .insert(accounts)
         .values(rawAccount)
         .returning()
-        .get()
+        .get())
 
       const account: AdapterAccount = {
         ...updatedAccount,
@@ -146,8 +146,8 @@ export function SQLiteDrizzleAdapter(
 
       return account
     },
-    getUserByAccount(account) {
-      const results = client
+    async getUserByAccount(account) {
+      const results = await (client
         .select()
         .from(accounts)
         .leftJoin(users, eq(users.id, accounts.userId))
@@ -157,26 +157,30 @@ export function SQLiteDrizzleAdapter(
             eq(accounts.providerAccountId, account.providerAccountId)
           )
         )
-        .get()
+        .get())
+
+      if (!results) {
+        return null;
+      }
 
-      return results?.user ?? null
+      return Promise.resolve(results).then((results) => results.user)
     },
-    deleteSession(sessionToken) {
+    async deleteSession(sessionToken) {
       return (
-        client
+        (await client
           .delete(sessions)
           .where(eq(sessions.sessionToken, sessionToken))
           .returning()
-          .get() ?? null
+          .get()) ?? null
       )
     },
-    createVerificationToken(token) {
+    async createVerificationToken(token) {
       return client.insert(verificationTokens).values(token).returning().get()
     },
-    useVerificationToken(token) {
+    async useVerificationToken(token) {
       try {
         return (
-          client
+          (await client
             .delete(verificationTokens)
             .where(
               and(
@@ -185,17 +189,17 @@ export function SQLiteDrizzleAdapter(
               )
             )
             .returning()
-            .get() ?? null
+            .get()) ?? null
         )
       } catch (err) {
         throw new Error("No verification token found.")
       }
     },
-    deleteUser(id) {
-      return client.delete(users).where(eq(users.id, id)).returning().get()
+    async deleteUser(id) {
+      return (await client.delete(users).where(eq(users.id, id)).returning().get())
     },
-    unlinkAccount(account) {
-      client
+    async unlinkAccount(account) {
+      await client
         .delete(accounts)
         .where(
           and(
